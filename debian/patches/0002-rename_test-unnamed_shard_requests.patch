--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00510_materialized_view_and_deduplication_zookeeper.reference
@@ -0,0 +1,8 @@
+2
+3
+
+2
+3
+
+1
+1
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00510_materialized_view_and_deduplication_zookeeper.sql
@@ -0,0 +1,51 @@
+SET experimental_allow_extended_storage_definition_syntax=1;
+
+DROP TABLE IF EXISTS test.with_deduplication;
+DROP TABLE IF EXISTS test.without_deduplication;
+DROP TABLE IF EXISTS test.with_deduplication_mv;
+DROP TABLE IF EXISTS test.without_deduplication_mv;
+
+CREATE TABLE test.with_deduplication(x UInt32)
+    ENGINE ReplicatedMergeTree('/clickhouse/tables/test/with_deduplication', 'r1') ORDER BY x;
+CREATE TABLE test.without_deduplication(x UInt32)
+    ENGINE ReplicatedMergeTree('/clickhouse/tables/test/without_deduplication', 'r1') ORDER BY x SETTINGS replicated_deduplication_window = 0;
+
+CREATE MATERIALIZED VIEW test.with_deduplication_mv
+    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/test/with_deduplication_mv', 'r1') ORDER BY dummy
+    AS SELECT 0 AS dummy, countState(x) AS cnt FROM test.with_deduplication;
+CREATE MATERIALIZED VIEW test.without_deduplication_mv
+    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/test/without_deduplication_mv', 'r1') ORDER BY dummy
+    AS SELECT 0 AS dummy, countState(x) AS cnt FROM test.without_deduplication;
+
+INSERT INTO test.with_deduplication VALUES (42);
+INSERT INTO test.with_deduplication VALUES (42);
+INSERT INTO test.with_deduplication VALUES (43);
+
+INSERT INTO test.without_deduplication VALUES (42);
+INSERT INTO test.without_deduplication VALUES (42);
+INSERT INTO test.without_deduplication VALUES (43);
+
+SELECT count() FROM test.with_deduplication;
+SELECT count() FROM test.without_deduplication;
+
+-- Implicit insert isn't deduplicated
+SELECT '';
+SELECT countMerge(cnt) FROM test.with_deduplication_mv;
+SELECT countMerge(cnt) FROM test.without_deduplication_mv;
+
+-- Explicit insert is deduplicated
+ALTER TABLE test.`.inner.with_deduplication_mv` DROP PARTITION ID 'all';
+ALTER TABLE test.`.inner.without_deduplication_mv` DROP PARTITION ID 'all';
+INSERT INTO test.`.inner.with_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
+INSERT INTO test.`.inner.with_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
+INSERT INTO test.`.inner.without_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
+INSERT INTO test.`.inner.without_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
+
+SELECT '';
+SELECT countMerge(cnt) FROM test.with_deduplication_mv;
+SELECT countMerge(cnt) FROM test.without_deduplication_mv;
+
+DROP TABLE IF EXISTS test.with_deduplication;
+DROP TABLE IF EXISTS test.without_deduplication;
+DROP TABLE IF EXISTS test.with_deduplication_mv;
+DROP TABLE IF EXISTS test.without_deduplication_mv;
--- a/dbms/tests/queries/0_stateless/00510_materizlized_view_and_deduplication.reference
+++ /dev/null
@@ -1,8 +0,0 @@
-2
-3
-
-2
-3
-
-1
-1
--- a/dbms/tests/queries/0_stateless/00510_materizlized_view_and_deduplication.sql
+++ /dev/null
@@ -1,51 +0,0 @@
-SET experimental_allow_extended_storage_definition_syntax=1;
-
-DROP TABLE IF EXISTS test.with_deduplication;
-DROP TABLE IF EXISTS test.without_deduplication;
-DROP TABLE IF EXISTS test.with_deduplication_mv;
-DROP TABLE IF EXISTS test.without_deduplication_mv;
-
-CREATE TABLE test.with_deduplication(x UInt32)
-    ENGINE ReplicatedMergeTree('/clickhouse/tables/test/with_deduplication', 'r1') ORDER BY x;
-CREATE TABLE test.without_deduplication(x UInt32)
-    ENGINE ReplicatedMergeTree('/clickhouse/tables/test/without_deduplication', 'r1') ORDER BY x SETTINGS replicated_deduplication_window = 0;
-
-CREATE MATERIALIZED VIEW test.with_deduplication_mv
-    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/test/with_deduplication_mv', 'r1') ORDER BY dummy
-    AS SELECT 0 AS dummy, countState(x) AS cnt FROM test.with_deduplication;
-CREATE MATERIALIZED VIEW test.without_deduplication_mv
-    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/test/without_deduplication_mv', 'r1') ORDER BY dummy
-    AS SELECT 0 AS dummy, countState(x) AS cnt FROM test.without_deduplication;
-
-INSERT INTO test.with_deduplication VALUES (42);
-INSERT INTO test.with_deduplication VALUES (42);
-INSERT INTO test.with_deduplication VALUES (43);
-
-INSERT INTO test.without_deduplication VALUES (42);
-INSERT INTO test.without_deduplication VALUES (42);
-INSERT INTO test.without_deduplication VALUES (43);
-
-SELECT count() FROM test.with_deduplication;
-SELECT count() FROM test.without_deduplication;
-
--- Implicit insert isn't deduplicated
-SELECT '';
-SELECT countMerge(cnt) FROM test.with_deduplication_mv;
-SELECT countMerge(cnt) FROM test.without_deduplication_mv;
-
--- Explicit insert is deduplicated
-ALTER TABLE test.`.inner.with_deduplication_mv` DROP PARTITION ID 'all';
-ALTER TABLE test.`.inner.without_deduplication_mv` DROP PARTITION ID 'all';
-INSERT INTO test.`.inner.with_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
-INSERT INTO test.`.inner.with_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
-INSERT INTO test.`.inner.without_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
-INSERT INTO test.`.inner.without_deduplication_mv` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;
-
-SELECT '';
-SELECT countMerge(cnt) FROM test.with_deduplication_mv;
-SELECT countMerge(cnt) FROM test.without_deduplication_mv;
-
-DROP TABLE IF EXISTS test.with_deduplication;
-DROP TABLE IF EXISTS test.without_deduplication;
-DROP TABLE IF EXISTS test.with_deduplication_mv;
-DROP TABLE IF EXISTS test.without_deduplication_mv;
--- a/dbms/tests/queries/0_stateless/00506_union_distributed.reference
+++ /dev/null
@@ -1,16 +0,0 @@
-3	8
-23	48
-33	68
-13	28
-3	8
-23	48
-33	68
-13	28
-3	8
-23	48
-33	68
-13	28
-3	8
-23	48
-33	68
-13	28
--- a/dbms/tests/queries/0_stateless/00506_union_distributed.sql
+++ /dev/null
@@ -1,24 +0,0 @@
-
--- https://github.com/yandex/ClickHouse/issues/1059
-
-DROP TABLE IF EXISTS test.union1;
-DROP TABLE IF EXISTS test.union2;
-DROP TABLE IF EXISTS test.union3;
-
-CREATE TABLE test.union1 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = MergeTree(date, (a, date), 8192);
-CREATE TABLE test.union2 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = Distributed(test_shard_localhost, 'test', 'union1');
-CREATE TABLE test.union3 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = Distributed(test_shard_localhost, 'test', 'union2');
-
-INSERT INTO test.union1 VALUES (1,  2, 3, 4, 5);
-INSERT INTO test.union1 VALUES (11,12,13,14,15);
-INSERT INTO test.union2 VALUES (21,22,23,24,25);
-INSERT INTO test.union3 VALUES (31,32,33,34,35);
-
-select b, sum(c) from ( select a, b, sum(c) as c from test.union2 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union2 where b>1 group by a, b ) as a group by b;
-select b, sum(c) from ( select a, b, sum(c) as c from test.union1 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union2 where b>1 group by a, b ) as a group by b;
-select b, sum(c) from ( select a, b, sum(c) as c from test.union1 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union1 where b>1 group by a, b ) as a group by b;
-select b, sum(c) from ( select a, b, sum(c) as c from test.union2 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union3 where b>1 group by a, b ) as a group by b;
-
-DROP TABLE test.union1;
-DROP TABLE test.union2;
-DROP TABLE test.union3;
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00506_union_distributed_zookeeper.reference
@@ -0,0 +1,16 @@
+3	8
+23	48
+33	68
+13	28
+3	8
+23	48
+33	68
+13	28
+3	8
+23	48
+33	68
+13	28
+3	8
+23	48
+33	68
+13	28
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00506_union_distributed_zookeeper.sql
@@ -0,0 +1,24 @@
+
+-- https://github.com/yandex/ClickHouse/issues/1059
+
+DROP TABLE IF EXISTS test.union1;
+DROP TABLE IF EXISTS test.union2;
+DROP TABLE IF EXISTS test.union3;
+
+CREATE TABLE test.union1 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = MergeTree(date, (a, date), 8192);
+CREATE TABLE test.union2 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = Distributed(test_shard_localhost, 'test', 'union1');
+CREATE TABLE test.union3 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = Distributed(test_shard_localhost, 'test', 'union2');
+
+INSERT INTO test.union1 VALUES (1,  2, 3, 4, 5);
+INSERT INTO test.union1 VALUES (11,12,13,14,15);
+INSERT INTO test.union2 VALUES (21,22,23,24,25);
+INSERT INTO test.union3 VALUES (31,32,33,34,35);
+
+select b, sum(c) from ( select a, b, sum(c) as c from test.union2 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union2 where b>1 group by a, b ) as a group by b;
+select b, sum(c) from ( select a, b, sum(c) as c from test.union1 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union2 where b>1 group by a, b ) as a group by b;
+select b, sum(c) from ( select a, b, sum(c) as c from test.union1 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union1 where b>1 group by a, b ) as a group by b;
+select b, sum(c) from ( select a, b, sum(c) as c from test.union2 where a>1 group by a,b UNION ALL select a, b, sum(c) as c from test.union3 where b>1 group by a, b ) as a group by b;
+
+DROP TABLE test.union1;
+DROP TABLE test.union2;
+DROP TABLE test.union3;
