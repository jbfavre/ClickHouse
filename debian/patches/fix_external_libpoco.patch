--- a/dbms/include/DB/IO/WriteBufferFromHTTPServerResponse.h
+++ b/dbms/include/DB/IO/WriteBufferFromHTTPServerResponse.h
@@ -2,7 +2,7 @@
 
 #include <experimental/optional>
 #include <mutex>
-
+#include <Poco/Version.h>
 #include <DB/IO/WriteBuffer.h>
 #include <DB/IO/BufferWithOwnMemory.h>
 #include <DB/IO/WriteBufferFromOStream.h>
@@ -49,7 +49,10 @@ private:
 	int compression_level = Z_DEFAULT_COMPRESSION;
 
 	std::ostream * response_body_ostr = nullptr;
+
+#if POCO_CLICKHOUSE_PATCH
 	std::ostream * response_header_ostr = nullptr;
+#endif
 
 	std::experimental::optional<WriteBufferFromOStream> out_raw;
 	std::experimental::optional<ZlibDeflatingWriteBuffer> deflating_buf;
--- a/dbms/src/IO/WriteBufferFromHTTPServerResponse.cpp
+++ b/dbms/src/IO/WriteBufferFromHTTPServerResponse.cpp
@@ -1,15 +1,14 @@
-#include <Poco/Net/HTTPServerResponse.h>
+#include <DB/IO/WriteBufferFromHTTPServerResponse.h>
 
+#include <Poco/Version.h>
+#include <Poco/Net/HTTPServerResponse.h>
 #include <DB/Common/Exception.h>
-
-#include <DB/IO/WriteBufferFromHTTPServerResponse.h>
 #include <DB/IO/WriteBufferFromString.h>
 #include <DB/IO/HTTPCommon.h>
 #include <DB/Common/NetException.h>
 #include <DB/Common/Stopwatch.h>
 #include <DB/Core/Progress.h>
 
-
 namespace DB
 {
 
@@ -30,7 +29,9 @@ void WriteBufferFromHTTPServerResponse::
 
 		setResponseDefaultHeaders(response);
 
+#if POCO_CLICKHOUSE_PATCH
 		std::tie(response_header_ostr, response_body_ostr) = response.beginSend();
+#endif
 	}
 }
 
@@ -41,8 +42,15 @@ void WriteBufferFromHTTPServerResponse::
 	{
 		headers_finished_sending = true;
 
+#if POCO_CLICKHOUSE_PATCH
 		/// Send end of headers delimiter.
 		*response_header_ostr << "\r\n" << std::flush;
+#else
+		/// Newline autosent by response.send()
+		/// if nothing to send in body:
+		if (!response_body_ostr)
+			response_body_ostr = &(response.send());
+#endif
 	}
 }
 
@@ -59,26 +67,47 @@ void WriteBufferFromHTTPServerResponse::
 			if (compress)
 			{
 				if (compression_method == ZlibCompressionMethod::Gzip)
+				{
+#if POCO_CLICKHOUSE_PATCH
 					*response_header_ostr << "Content-Encoding: gzip\r\n";
+#else
+					response.set("Content-Encoding", "gzip");
+#endif
+				}
 				else if (compression_method == ZlibCompressionMethod::Zlib)
+				{
+#if POCO_CLICKHOUSE_PATCH
 					*response_header_ostr << "Content-Encoding: deflate\r\n";
+#else
+					response.set("Content-Encoding", "deflate");
+#endif
+				}
 				else
 					throw Exception("Logical error: unknown compression method passed to WriteBufferFromHTTPServerResponse",
 									ErrorCodes::LOGICAL_ERROR);
-
 				/// Use memory allocated for the outer buffer in the buffer pointed to by out. This avoids extra allocation and copy.
+
+#if !POCO_CLICKHOUSE_PATCH
+				response_body_ostr = &(response.send());
+#endif
+
 				out_raw.emplace(*response_body_ostr);
 				deflating_buf.emplace(out_raw.value(), compression_method, compression_level, working_buffer.size(), working_buffer.begin());
 				out = &deflating_buf.value();
 			}
 			else
 			{
+#if !POCO_CLICKHOUSE_PATCH
+				response_body_ostr = &(response.send());
+#endif
+
 				out_raw.emplace(*response_body_ostr, working_buffer.size(), working_buffer.begin());
 				out = &out_raw.value();
 			}
 		}
 
 		finishSendHeaders();
+
 	}
 
 	out->position() = position();
@@ -120,7 +149,9 @@ void WriteBufferFromHTTPServerResponse::
 			accumulated_progress.writeJSON(progress_string_writer);
 		}
 
+#if POCO_CLICKHOUSE_PATCH
 		*response_header_ostr << "X-ClickHouse-Progress: " << progress_string << "\r\n" << std::flush;
+#endif
 	}
 }
 
--- a/dbms/tests/queries/0_stateless/00416_progress_in_http_headers.reference
+++ b/dbms/tests/queries/0_stateless/00416_progress_in_http_headers.reference
@@ -1,14 +1,3 @@
-< X-ClickHouse-Progress: {"read_rows":"0","read_bytes":"0","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"1","read_bytes":"8","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"2","read_bytes":"16","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"3","read_bytes":"24","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"4","read_bytes":"32","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"5","read_bytes":"40","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"6","read_bytes":"48","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"7","read_bytes":"56","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"8","read_bytes":"64","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"9","read_bytes":"72","total_rows":"0"}
-< X-ClickHouse-Progress: {"read_rows":"10","read_bytes":"80","total_rows":"0"}
 0
 1
 2
